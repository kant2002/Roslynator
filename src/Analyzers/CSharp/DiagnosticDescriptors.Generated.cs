// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System;
using Microsoft.CodeAnalysis;

namespace Roslynator.CSharp
{
    public static partial class DiagnosticDescriptors
    {
        /// <summary>RCS1001</summary>
        public static readonly DiagnosticDescriptor AddBracesWhenExpressionSpansOverMultipleLines = Factory.Create(
            id:                 DiagnosticIdentifiers.AddBracesWhenExpressionSpansOverMultipleLines, 
            title:              "Add braces (when expression spans over multiple lines).", 
            messageFormat:      "Add braces to {0} (when expression spans over multiple lines).", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddBracesWhenExpressionSpansOverMultipleLines, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1002</summary>
        public static readonly DiagnosticDescriptor RemoveBraces = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveBraces, 
            title:              "Remove braces.", 
            messageFormat:      "Remove braces from {0}.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveBraces, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor RemoveBracesFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(RemoveBraces);

        /// <summary>RCS1003</summary>
        public static readonly DiagnosticDescriptor AddBracesToIfElseWhenExpressionSpansOverMultipleLines = Factory.Create(
            id:                 DiagnosticIdentifiers.AddBracesToIfElseWhenExpressionSpansOverMultipleLines, 
            title:              "Add braces to if-else (when expression spans over multiple lines).", 
            messageFormat:      "Add braces to if-else (when expression spans over multiple lines).", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddBracesToIfElseWhenExpressionSpansOverMultipleLines, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1004</summary>
        public static readonly DiagnosticDescriptor RemoveBracesFromIfElse = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveBracesFromIfElse, 
            title:              "Remove braces from if-else.", 
            messageFormat:      "Remove braces from if-else.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveBracesFromIfElse, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor RemoveBracesFromIfElseFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(RemoveBracesFromIfElse);

        /// <summary>RCS1005</summary>
        public static readonly DiagnosticDescriptor SimplifyNestedUsingStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.SimplifyNestedUsingStatement, 
            title:              "Simplify nested using statement.", 
            messageFormat:      "Simplify nested using statement.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SimplifyNestedUsingStatement, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor SimplifyNestedUsingStatementFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(SimplifyNestedUsingStatement);

        /// <summary>RCS1006</summary>
        public static readonly DiagnosticDescriptor MergeElseClauseWithNestedIfStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.MergeElseClauseWithNestedIfStatement, 
            title:              "Merge else clause with nested if statement.", 
            messageFormat:      "Merge else clause with nested if statement.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MergeElseClauseWithNestedIfStatement, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor MergeElseClauseWithNestedIfStatementFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(MergeElseClauseWithNestedIfStatement);

        /// <summary>RCS1007</summary>
        public static readonly DiagnosticDescriptor AddBraces = Factory.Create(
            id:                 DiagnosticIdentifiers.AddBraces, 
            title:              "Add braces.", 
            messageFormat:      "Add braces to {0}.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddBraces, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1008</summary>
        public static readonly DiagnosticDescriptor UseExplicitTypeInsteadOfVarWhenTypeIsNotObvious = Factory.Create(
            id:                 DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarWhenTypeIsNotObvious, 
            title:              "Use explicit type instead of 'var' (when the type is not obvious).", 
            messageFormat:      "Use explicit type instead of 'var'.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarWhenTypeIsNotObvious, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1009</summary>
        public static readonly DiagnosticDescriptor UseExplicitTypeInsteadOfVarInForEach = Factory.Create(
            id:                 DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarInForEach, 
            title:              "Use explicit type instead of 'var' (foreach variable).", 
            messageFormat:      "Use explicit type instead of 'var'.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarInForEach, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1010</summary>
        public static readonly DiagnosticDescriptor UseVarInsteadOfExplicitTypeWhenTypeIsObvious = Factory.Create(
            id:                 DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeWhenTypeIsObvious, 
            title:              "Use 'var' instead of explicit type (when the type is obvious).", 
            messageFormat:      "Use 'var' instead of explicit type.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeWhenTypeIsObvious, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1012</summary>
        public static readonly DiagnosticDescriptor UseExplicitTypeInsteadOfVarWhenTypeIsObvious = Factory.Create(
            id:                 DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarWhenTypeIsObvious, 
            title:              "Use explicit type instead of 'var' (when the type is obvious).", 
            messageFormat:      "Use explicit type instead of 'var'.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseExplicitTypeInsteadOfVarWhenTypeIsObvious, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1013</summary>
        public static readonly DiagnosticDescriptor UsePredefinedType = Factory.Create(
            id:                 DiagnosticIdentifiers.UsePredefinedType, 
            title:              "Use predefined type.", 
            messageFormat:      "Use predefined type.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UsePredefinedType, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1014</summary>
        public static readonly DiagnosticDescriptor AvoidImplicitlyTypedArray = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidImplicitlyTypedArray, 
            title:              "Avoid implicitly-typed array.", 
            messageFormat:      "Declare explicit type when creating an array.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidImplicitlyTypedArray, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1015</summary>
        public static readonly DiagnosticDescriptor UseNameOfOperator = Factory.Create(
            id:                 DiagnosticIdentifiers.UseNameOfOperator, 
            title:              "Use nameof operator.", 
            messageFormat:      "Use nameof operator.", 
            category:           DiagnosticCategories.Maintainability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseNameOfOperator, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor UseNameOfOperatorFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(UseNameOfOperator);

        /// <summary>RCS1016</summary>
        public static readonly DiagnosticDescriptor UseExpressionBodiedMember = Factory.Create(
            id:                 DiagnosticIdentifiers.UseExpressionBodiedMember, 
            title:              "Use expression-bodied member.", 
            messageFormat:      "Use expression bodied member.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseExpressionBodiedMember, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor UseExpressionBodiedMemberFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(UseExpressionBodiedMember);

        /// <summary>RCS1017</summary>
        public static readonly DiagnosticDescriptor AvoidMultilineExpressionBody = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidMultilineExpressionBody, 
            title:              "Avoid multiline expression body.", 
            messageFormat:      "Expand expression body with multiline expression.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidMultilineExpressionBody, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1018</summary>
        public static readonly DiagnosticDescriptor AddAccessibilityModifiers = Factory.Create(
            id:                 DiagnosticIdentifiers.AddAccessibilityModifiers, 
            title:              "Add accessibility modifiers.", 
            messageFormat:      "Add accessibility modifiers.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddAccessibilityModifiers, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1019</summary>
        public static readonly DiagnosticDescriptor OrderModifiers = Factory.Create(
            id:                 DiagnosticIdentifiers.OrderModifiers, 
            title:              "Order modifiers.", 
            messageFormat:      "Order modifiers.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.OrderModifiers, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1020</summary>
        public static readonly DiagnosticDescriptor SimplifyNullableOfT = Factory.Create(
            id:                 DiagnosticIdentifiers.SimplifyNullableOfT, 
            title:              "Simplify Nullable<T> to T?.", 
            messageFormat:      "Simplify Nullable<T> to T?.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SimplifyNullableOfT, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1021</summary>
        public static readonly DiagnosticDescriptor SimplifyLambdaExpression = Factory.Create(
            id:                 DiagnosticIdentifiers.SimplifyLambdaExpression, 
            title:              "Simplify lambda expression.", 
            messageFormat:      "Simplify lambda expression.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SimplifyLambdaExpression, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor SimplifyLambdaExpressionFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(SimplifyLambdaExpression);

        /// <summary>RCS1023</summary>
        public static readonly DiagnosticDescriptor FormatEmptyBlock = Factory.Create(
            id:                 DiagnosticIdentifiers.FormatEmptyBlock, 
            title:              "Format empty block.", 
            messageFormat:      "Format empty block.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FormatEmptyBlock, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1024</summary>
        public static readonly DiagnosticDescriptor FormatAccessorList = Factory.Create(
            id:                 DiagnosticIdentifiers.FormatAccessorList, 
            title:              "Format accessor list.", 
            messageFormat:      "Format accessor list.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FormatAccessorList, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1025</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeEnumMember = Factory.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeEnumMember, 
            title:              "Add new line before enum member.", 
            messageFormat:      "Add new line before enum member.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeEnumMember, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1026</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeStatement, 
            title:              "Add new line before statement.", 
            messageFormat:      "Add new line before statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeStatement, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1027</summary>
        public static readonly DiagnosticDescriptor AddNewLineBeforeEmbeddedStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.AddNewLineBeforeEmbeddedStatement, 
            title:              "Add new line before embedded statement.", 
            messageFormat:      "Add new line before embedded statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineBeforeEmbeddedStatement, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1028</summary>
        public static readonly DiagnosticDescriptor AddNewLineAfterSwitchLabel = Factory.Create(
            id:                 DiagnosticIdentifiers.AddNewLineAfterSwitchLabel, 
            title:              "Add new line after switch label.", 
            messageFormat:      "Add new line after switch label.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddNewLineAfterSwitchLabel, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1029</summary>
        public static readonly DiagnosticDescriptor FormatBinaryOperatorOnNextLine = Factory.Create(
            id:                 DiagnosticIdentifiers.FormatBinaryOperatorOnNextLine, 
            title:              "Format binary operator on next line.", 
            messageFormat:      "Format binary operator on next line.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FormatBinaryOperatorOnNextLine, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1030</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineAfterEmbeddedStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineAfterEmbeddedStatement, 
            title:              "Add empty line after embedded statement.", 
            messageFormat:      "Add empty line after embedded statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineAfterEmbeddedStatement, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1031</summary>
        public static readonly DiagnosticDescriptor RemoveUnnecessaryBraces = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveUnnecessaryBraces, 
            title:              "Remove unnecessary braces.", 
            messageFormat:      "Remove unnecessary braces.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveUnnecessaryBraces, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        public static readonly DiagnosticDescriptor RemoveUnnecessaryBracesFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(RemoveUnnecessaryBraces);

        /// <summary>RCS1032</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantParentheses = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantParentheses, 
            title:              "Remove redundant parentheses.", 
            messageFormat:      "Remove redundant parentheses.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantParentheses, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor RemoveRedundantParenthesesFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(RemoveRedundantParentheses);

        /// <summary>RCS1033</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantBooleanLiteral = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantBooleanLiteral, 
            title:              "Remove redundant boolean literal.", 
            messageFormat:      "Remove redundant '{0}'.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantBooleanLiteral, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1034</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantSealedModifier = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantSealedModifier, 
            title:              "Remove redundant 'sealed' modifier.", 
            messageFormat:      "Remove redundant 'sealed' modifier.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantSealedModifier, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1035</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantCommaInInitializer = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantCommaInInitializer, 
            title:              "Remove redundant comma in initializer.", 
            messageFormat:      "Remove redundant comma in initializer.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantCommaInInitializer, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1036</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantEmptyLine = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantEmptyLine, 
            title:              "Remove redundant empty line.", 
            messageFormat:      "Remove redundant empty line.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantEmptyLine, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1037</summary>
        public static readonly DiagnosticDescriptor RemoveTrailingWhitespace = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveTrailingWhitespace, 
            title:              "Remove trailing white-space.", 
            messageFormat:      "Remove trailing white-space.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveTrailingWhitespace, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1038</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveEmptyStatement, 
            title:              "Remove empty statement.", 
            messageFormat:      "Remove empty statement.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEmptyStatement, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1039</summary>
        public static readonly DiagnosticDescriptor RemoveArgumentListFromAttribute = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveArgumentListFromAttribute, 
            title:              "Remove argument list from attribute.", 
            messageFormat:      "Remove argument list from attribute.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveArgumentListFromAttribute, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1040</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyElseClause = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveEmptyElseClause, 
            title:              "Remove empty else clause.", 
            messageFormat:      "Remove empty else clause.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEmptyElseClause, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1041</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyInitializer = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveEmptyInitializer, 
            title:              "Remove empty initializer.", 
            messageFormat:      "Remove empty initializer.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEmptyInitializer, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1042</summary>
        public static readonly DiagnosticDescriptor RemoveEnumDefaultUnderlyingType = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveEnumDefaultUnderlyingType, 
            title:              "Remove enum default underlying type.", 
            messageFormat:      "Remove enum default underlying type.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEnumDefaultUnderlyingType, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1043</summary>
        public static readonly DiagnosticDescriptor RemovePartialModifierFromTypeWithSinglePart = Factory.Create(
            id:                 DiagnosticIdentifiers.RemovePartialModifierFromTypeWithSinglePart, 
            title:              "Remove 'partial' modifier from type with a single part.", 
            messageFormat:      "Remove 'partial' modifier from type with a single part.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemovePartialModifierFromTypeWithSinglePart, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1044</summary>
        public static readonly DiagnosticDescriptor RemoveOriginalExceptionFromThrowStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveOriginalExceptionFromThrowStatement, 
            title:              "Remove original exception from throw statement.", 
            messageFormat:      "Remove original exception from throw statement.", 
            category:           DiagnosticCategories.Maintainability, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveOriginalExceptionFromThrowStatement, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1045</summary>
        public static readonly DiagnosticDescriptor RenamePrivateFieldAccordingToCamelCaseWithUnderscore = Factory.Create(
            id:                 DiagnosticIdentifiers.RenamePrivateFieldAccordingToCamelCaseWithUnderscore, 
            title:              "Rename private field according to camel case with underscore.", 
            messageFormat:      "Rename private field to camel case with underscore.", 
            category:           DiagnosticCategories.Naming, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RenamePrivateFieldAccordingToCamelCaseWithUnderscore, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1046</summary>
        public static readonly DiagnosticDescriptor AsynchronousMethodNameShouldEndWithAsync = Factory.Create(
            id:                 DiagnosticIdentifiers.AsynchronousMethodNameShouldEndWithAsync, 
            title:              "Asynchronous method name should end with 'Async'.", 
            messageFormat:      "Add suffix 'Async' to asynchronous method name.", 
            category:           DiagnosticCategories.Naming, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AsynchronousMethodNameShouldEndWithAsync, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1047</summary>
        public static readonly DiagnosticDescriptor NonAsynchronousMethodNameShouldNotEndWithAsync = Factory.Create(
            id:                 DiagnosticIdentifiers.NonAsynchronousMethodNameShouldNotEndWithAsync, 
            title:              "Non-asynchronous method name should not end with 'Async'.", 
            messageFormat:      "Remove suffix 'Async' from non-asynchronous method name.", 
            category:           DiagnosticCategories.Naming, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.NonAsynchronousMethodNameShouldNotEndWithAsync, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor NonAsynchronousMethodNameShouldNotEndWithAsyncFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(NonAsynchronousMethodNameShouldNotEndWithAsync);

        /// <summary>RCS1048</summary>
        public static readonly DiagnosticDescriptor UseLambdaExpressionInsteadOfAnonymousMethod = Factory.Create(
            id:                 DiagnosticIdentifiers.UseLambdaExpressionInsteadOfAnonymousMethod, 
            title:              "Use lambda expression instead of anonymous method.", 
            messageFormat:      "Use lambda expression instead of anonymous method.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseLambdaExpressionInsteadOfAnonymousMethod, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor UseLambdaExpressionInsteadOfAnonymousMethodFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(UseLambdaExpressionInsteadOfAnonymousMethod);

        /// <summary>RCS1049</summary>
        public static readonly DiagnosticDescriptor SimplifyBooleanComparison = Factory.Create(
            id:                 DiagnosticIdentifiers.SimplifyBooleanComparison, 
            title:              "Simplify boolean comparison.", 
            messageFormat:      "Simplify boolean comparison.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SimplifyBooleanComparison, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor SimplifyBooleanComparisonFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(SimplifyBooleanComparison);

        /// <summary>RCS1050</summary>
        public static readonly DiagnosticDescriptor AddArgumentListToObjectCreation = Factory.Create(
            id:                 DiagnosticIdentifiers.AddArgumentListToObjectCreation, 
            title:              "Add argument list to object creation expression.", 
            messageFormat:      "Add argument list to object creation expression.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddArgumentListToObjectCreation, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1051</summary>
        public static readonly DiagnosticDescriptor ParenthesizeConditionInConditionalExpression = Factory.Create(
            id:                 DiagnosticIdentifiers.ParenthesizeConditionInConditionalExpression, 
            title:              "Parenthesize condition in conditional expression.", 
            messageFormat:      "Parenthesize condition in conditional expression.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ParenthesizeConditionInConditionalExpression, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1052</summary>
        public static readonly DiagnosticDescriptor DeclareEachAttributeSeparately = Factory.Create(
            id:                 DiagnosticIdentifiers.DeclareEachAttributeSeparately, 
            title:              "Declare each attribute separately.", 
            messageFormat:      "Declare each attribute separately.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.DeclareEachAttributeSeparately, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1055</summary>
        public static readonly DiagnosticDescriptor AvoidSemicolonAtEndOfDeclaration = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidSemicolonAtEndOfDeclaration, 
            title:              "Avoid semicolon at the end of declaration.", 
            messageFormat:      "Remove semicolon from the end of declaration.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidSemicolonAtEndOfDeclaration, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1056</summary>
        public static readonly DiagnosticDescriptor AvoidUsageOfUsingAliasDirective = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidUsageOfUsingAliasDirective, 
            title:              "Avoid usage of using alias directive.", 
            messageFormat:      "Avoid usage of using alias directive.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidUsageOfUsingAliasDirective, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1057</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBetweenDeclarations = Factory.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBetweenDeclarations, 
            title:              "Add empty line between declarations.", 
            messageFormat:      "Add empty line between declarations.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBetweenDeclarations, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1058</summary>
        public static readonly DiagnosticDescriptor UseCompoundAssignment = Factory.Create(
            id:                 DiagnosticIdentifiers.UseCompoundAssignment, 
            title:              "Use compound assignment.", 
            messageFormat:      "Use compound assignment.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseCompoundAssignment, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor UseCompoundAssignmentFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(UseCompoundAssignment);

        /// <summary>RCS1059</summary>
        public static readonly DiagnosticDescriptor AvoidLockingOnPubliclyAccessibleInstance = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidLockingOnPubliclyAccessibleInstance, 
            title:              "Avoid locking on publicly accessible instance.", 
            messageFormat:      "Lock on private field instead of locking on '{0}'.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidLockingOnPubliclyAccessibleInstance, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1060</summary>
        public static readonly DiagnosticDescriptor DeclareEachTypeInSeparateFile = Factory.Create(
            id:                 DiagnosticIdentifiers.DeclareEachTypeInSeparateFile, 
            title:              "Declare each type in separate file.", 
            messageFormat:      "Declare each type in separate file.", 
            category:           DiagnosticCategories.Maintainability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.DeclareEachTypeInSeparateFile, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1061</summary>
        public static readonly DiagnosticDescriptor MergeIfStatementWithNestedIfStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.MergeIfStatementWithNestedIfStatement, 
            title:              "Merge if statement with nested if statement.", 
            messageFormat:      "Merge if statement with nested if statement.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MergeIfStatementWithNestedIfStatement, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor MergeIfStatementWithNestedIfStatementFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(MergeIfStatementWithNestedIfStatement);

        /// <summary>RCS1062</summary>
        public static readonly DiagnosticDescriptor AvoidInterpolatedStringWithNoInterpolation = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidInterpolatedStringWithNoInterpolation, 
            title:              "Avoid interpolated string with no interpolation.", 
            messageFormat:      "Remove '$' from interpolated string with no interpolation.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidInterpolatedStringWithNoInterpolation, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1063</summary>
        public static readonly DiagnosticDescriptor AvoidUsageOfDoStatementToCreateInfiniteLoop = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidUsageOfDoStatementToCreateInfiniteLoop, 
            title:              "Avoid usage of do statement to create an infinite loop.", 
            messageFormat:      "Use while statement to create an infinite loop.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidUsageOfDoStatementToCreateInfiniteLoop, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1064</summary>
        public static readonly DiagnosticDescriptor AvoidUsageOfForStatementToCreateInfiniteLoop = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidUsageOfForStatementToCreateInfiniteLoop, 
            title:              "Avoid usage of for statement to create an infinite loop.", 
            messageFormat:      "Use while statement to create an infinite loop.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidUsageOfForStatementToCreateInfiniteLoop, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1065</summary>
        public static readonly DiagnosticDescriptor AvoidUsageOfWhileStatementToCreateInfiniteLoop = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidUsageOfWhileStatementToCreateInfiniteLoop, 
            title:              "Avoid usage of while statement to create an inifinite loop.", 
            messageFormat:      "Use for statement to create an infinite loop.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidUsageOfWhileStatementToCreateInfiniteLoop, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1066</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyFinallyClause = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveEmptyFinallyClause, 
            title:              "Remove empty finally clause.", 
            messageFormat:      "Remove empty finally clause.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEmptyFinallyClause, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1067</summary>
        public static readonly DiagnosticDescriptor RemoveArgumentListFromObjectCreation = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveArgumentListFromObjectCreation, 
            title:              "Remove argument list from object creation expression.", 
            messageFormat:      "Remove argument list from object creation expression.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveArgumentListFromObjectCreation, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1068</summary>
        public static readonly DiagnosticDescriptor SimplifyLogicalNegation = Factory.Create(
            id:                 DiagnosticIdentifiers.SimplifyLogicalNegation, 
            title:              "Simplify logical negation.", 
            messageFormat:      "Simplify logical negation.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SimplifyLogicalNegation, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1069</summary>
        public static readonly DiagnosticDescriptor RemoveUnnecessaryCaseLabel = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveUnnecessaryCaseLabel, 
            title:              "Remove unnecessary case label.", 
            messageFormat:      "Remove unnecessary case label.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveUnnecessaryCaseLabel, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1070</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantDefaultSwitchSection = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantDefaultSwitchSection, 
            title:              "Remove redundant default switch section.", 
            messageFormat:      "Remove redundant default switch section.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantDefaultSwitchSection, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1071</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantBaseConstructorCall = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantBaseConstructorCall, 
            title:              "Remove redundant base constructor call.", 
            messageFormat:      "Remove redundant base constructor call.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantBaseConstructorCall, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1072</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyNamespaceDeclaration = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveEmptyNamespaceDeclaration, 
            title:              "Remove empty namespace declaration.", 
            messageFormat:      "Remove empty namespace declaration.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEmptyNamespaceDeclaration, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1073</summary>
        public static readonly DiagnosticDescriptor ConvertIfToReturnStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.ConvertIfToReturnStatement, 
            title:              "Convert 'if' to 'return' statement.", 
            messageFormat:      "Convert 'if' to 'return' statement.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ConvertIfToReturnStatement, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor ConvertIfToReturnStatementFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(ConvertIfToReturnStatement);

        /// <summary>RCS1074</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantConstructor = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantConstructor, 
            title:              "Remove redundant constructor.", 
            messageFormat:      "Remove redundant constructor.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantConstructor, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1075</summary>
        public static readonly DiagnosticDescriptor AvoidEmptyCatchClauseThatCatchesSystemException = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidEmptyCatchClauseThatCatchesSystemException, 
            title:              "Avoid empty catch clause that catches System.Exception.", 
            messageFormat:      "Avoid empty catch clause that catches System.Exception.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidEmptyCatchClauseThatCatchesSystemException, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1076</summary>
        public static readonly DiagnosticDescriptor FormatDeclarationBraces = Factory.Create(
            id:                 DiagnosticIdentifiers.FormatDeclarationBraces, 
            title:              "Format declaration braces.", 
            messageFormat:      "Format declaration braces.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FormatDeclarationBraces, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1077</summary>
        public static readonly DiagnosticDescriptor OptimizeLinqMethodCall = Factory.Create(
            id:                 DiagnosticIdentifiers.OptimizeLinqMethodCall, 
            title:              "Optimize LINQ method call.", 
            messageFormat:      "Optimize LINQ method call.", 
            category:           DiagnosticCategories.Performance, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.OptimizeLinqMethodCall, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1078</summary>
        public static readonly DiagnosticDescriptor UseEmptyStringLiteralInsteadOfStringEmpty = Factory.Create(
            id:                 DiagnosticIdentifiers.UseEmptyStringLiteralInsteadOfStringEmpty, 
            title:              "Use \"\" instead of string.Empty.", 
            messageFormat:      "Use \"\" instead of string.Empty", 
            category:           DiagnosticCategories.General, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseEmptyStringLiteralInsteadOfStringEmpty, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1079</summary>
        public static readonly DiagnosticDescriptor ThrowingOfNewNotImplementedException = Factory.Create(
            id:                 DiagnosticIdentifiers.ThrowingOfNewNotImplementedException, 
            title:              "Throwing of new NotImplementedException.", 
            messageFormat:      "Implement the functionality instead of throwing new NotImplementedException.", 
            category:           DiagnosticCategories.General, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ThrowingOfNewNotImplementedException, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1080</summary>
        public static readonly DiagnosticDescriptor UseCountOrLengthPropertyInsteadOfAnyMethod = Factory.Create(
            id:                 DiagnosticIdentifiers.UseCountOrLengthPropertyInsteadOfAnyMethod, 
            title:              "Use 'Count/Length' property instead of 'Any' method.", 
            messageFormat:      "Use '{0}' property instead of 'Any' method.", 
            category:           DiagnosticCategories.Performance, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseCountOrLengthPropertyInsteadOfAnyMethod, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1081</summary>
        public static readonly DiagnosticDescriptor SplitVariableDeclaration = Factory.Create(
            id:                 DiagnosticIdentifiers.SplitVariableDeclaration, 
            title:              "Split variable declaration.", 
            messageFormat:      "Split variable declaration.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SplitVariableDeclaration, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1084</summary>
        public static readonly DiagnosticDescriptor UseCoalesceExpressionInsteadOfConditionalExpression = Factory.Create(
            id:                 DiagnosticIdentifiers.UseCoalesceExpressionInsteadOfConditionalExpression, 
            title:              "Use coalesce expression instead of conditional expression.", 
            messageFormat:      "Use coalesce expression instead of conditional expression.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseCoalesceExpressionInsteadOfConditionalExpression, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1085</summary>
        public static readonly DiagnosticDescriptor UseAutoProperty = Factory.Create(
            id:                 DiagnosticIdentifiers.UseAutoProperty, 
            title:              "Use auto-implemented property.", 
            messageFormat:      "Use auto-implemented property.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseAutoProperty, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor UseAutoPropertyFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(UseAutoProperty);

        /// <summary>RCS1086</summary>
        public static readonly DiagnosticDescriptor UseLinefeedAsNewLine = Factory.Create(
            id:                 DiagnosticIdentifiers.UseLinefeedAsNewLine, 
            title:              "Use linefeed as newline.", 
            messageFormat:      "Use linefeed as newline.", 
            category:           DiagnosticCategories.General, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseLinefeedAsNewLine, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1087</summary>
        public static readonly DiagnosticDescriptor UseCarriageReturnAndLinefeedAsNewLine = Factory.Create(
            id:                 DiagnosticIdentifiers.UseCarriageReturnAndLinefeedAsNewLine, 
            title:              "Use carriage return + linefeed as newline.", 
            messageFormat:      "Use carriage return + linefeed as newline.", 
            category:           DiagnosticCategories.General, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseCarriageReturnAndLinefeedAsNewLine, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1088</summary>
        public static readonly DiagnosticDescriptor UseSpacesInsteadOfTab = Factory.Create(
            id:                 DiagnosticIdentifiers.UseSpacesInsteadOfTab, 
            title:              "Use space(s) instead of tab.", 
            messageFormat:      "Use space(s) instead of tab.", 
            category:           DiagnosticCategories.General, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseSpacesInsteadOfTab, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1089</summary>
        public static readonly DiagnosticDescriptor UseUnaryOperatorInsteadOfAssignment = Factory.Create(
            id:                 DiagnosticIdentifiers.UseUnaryOperatorInsteadOfAssignment, 
            title:              "Use --/++ operator instead of assignment.", 
            messageFormat:      "Use {0} operator instead of assignment.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseUnaryOperatorInsteadOfAssignment, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor UseUnaryOperatorInsteadOfAssignmentFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(UseUnaryOperatorInsteadOfAssignment);

        /// <summary>RCS1090</summary>
        public static readonly DiagnosticDescriptor CallConfigureAwait = Factory.Create(
            id:                 DiagnosticIdentifiers.CallConfigureAwait, 
            title:              "Call 'ConfigureAwait(false)'.", 
            messageFormat:      "Call 'ConfigureAwait(false).", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.CallConfigureAwait, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1091</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyRegion = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveEmptyRegion, 
            title:              "Remove empty region.", 
            messageFormat:      "Remove empty region.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEmptyRegion, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor RemoveEmptyRegionFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(RemoveEmptyRegion);

        /// <summary>RCS1092</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineBeforeWhileInDoStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineBeforeWhileInDoStatement, 
            title:              "Add empty line before 'while' keyword in 'do' statement.", 
            messageFormat:      "Add empty line before 'while' keyword in 'do' statement.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineBeforeWhileInDoStatement, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1093</summary>
        public static readonly DiagnosticDescriptor RemoveFileWithNoCode = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveFileWithNoCode, 
            title:              "Remove file with no code.", 
            messageFormat:      "Remove file with no code.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveFileWithNoCode, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1094</summary>
        public static readonly DiagnosticDescriptor DeclareUsingDirectiveOnTopLevel = Factory.Create(
            id:                 DiagnosticIdentifiers.DeclareUsingDirectiveOnTopLevel, 
            title:              "Declare using directive on top level.", 
            messageFormat:      "Declare using directive on top level.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.DeclareUsingDirectiveOnTopLevel, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1096</summary>
        public static readonly DiagnosticDescriptor UseBitwiseOperationInsteadOfCallingHasFlag = Factory.Create(
            id:                 DiagnosticIdentifiers.UseBitwiseOperationInsteadOfCallingHasFlag, 
            title:              "Use bitwise operation instead of calling 'HasFlag'.", 
            messageFormat:      "Use bitwise operation instead of calling 'HasFlag'.", 
            category:           DiagnosticCategories.Performance, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseBitwiseOperationInsteadOfCallingHasFlag, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1097</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantToStringCall = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantToStringCall, 
            title:              "Remove redundant 'ToString' call.", 
            messageFormat:      "Remove redundant 'ToString' call.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantToStringCall, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1098</summary>
        public static readonly DiagnosticDescriptor AvoidNullLiteralExpressionOnLeftSideOfBinaryExpression = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidNullLiteralExpressionOnLeftSideOfBinaryExpression, 
            title:              "Avoid 'null' on the left side of a binary expression.", 
            messageFormat:      "'null' should be on the right side of a binary expression.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidNullLiteralExpressionOnLeftSideOfBinaryExpression, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1099</summary>
        public static readonly DiagnosticDescriptor DefaultLabelShouldBeLastLabelInSwitchSection = Factory.Create(
            id:                 DiagnosticIdentifiers.DefaultLabelShouldBeLastLabelInSwitchSection, 
            title:              "Default label should be the last label in a switch section.", 
            messageFormat:      "Move default label to the last position in a switch section.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.DefaultLabelShouldBeLastLabelInSwitchSection, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1100</summary>
        public static readonly DiagnosticDescriptor FormatDocumentationSummaryOnSingleLine = Factory.Create(
            id:                 DiagnosticIdentifiers.FormatDocumentationSummaryOnSingleLine, 
            title:              "Format documentation summary on a single line.", 
            messageFormat:      "Format documentation summary on a single line.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FormatDocumentationSummaryOnSingleLine, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1101</summary>
        public static readonly DiagnosticDescriptor FormatDocumentationSummaryOnMultipleLines = Factory.Create(
            id:                 DiagnosticIdentifiers.FormatDocumentationSummaryOnMultipleLines, 
            title:              "Format documentation summary on multiple lines.", 
            messageFormat:      "Format documentation summary on multiple lines.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FormatDocumentationSummaryOnMultipleLines, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1102</summary>
        public static readonly DiagnosticDescriptor MakeClassStatic = Factory.Create(
            id:                 DiagnosticIdentifiers.MakeClassStatic, 
            title:              "Make class static.", 
            messageFormat:      "Make class static.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MakeClassStatic, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1103</summary>
        public static readonly DiagnosticDescriptor ConvertIfToAssignment = Factory.Create(
            id:                 DiagnosticIdentifiers.ConvertIfToAssignment, 
            title:              "Convert 'if' to assignment.", 
            messageFormat:      "Convert 'if' to assignment.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ConvertIfToAssignment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1104</summary>
        public static readonly DiagnosticDescriptor SimplifyConditionalExpression = Factory.Create(
            id:                 DiagnosticIdentifiers.SimplifyConditionalExpression, 
            title:              "Simplify conditional expression.", 
            messageFormat:      "Simplify conditional expression.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SimplifyConditionalExpression, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1105</summary>
        public static readonly DiagnosticDescriptor UnnecessaryInterpolation = Factory.Create(
            id:                 DiagnosticIdentifiers.UnnecessaryInterpolation, 
            title:              "Unncessary interpolation.", 
            messageFormat:      "Unncessary interpolation.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UnnecessaryInterpolation, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1106</summary>
        public static readonly DiagnosticDescriptor RemoveEmptyDestructor = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveEmptyDestructor, 
            title:              "Remove empty destructor.", 
            messageFormat:      "Remove empty destructor.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveEmptyDestructor, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1107</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantStringToCharArrayCall = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantStringToCharArrayCall, 
            title:              "Remove redundant 'ToCharArray' call.", 
            messageFormat:      "Remove redundant 'ToCharArray' call.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantStringToCharArrayCall, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1108</summary>
        public static readonly DiagnosticDescriptor AddStaticModifierToAllPartialClassDeclarations = Factory.Create(
            id:                 DiagnosticIdentifiers.AddStaticModifierToAllPartialClassDeclarations, 
            title:              "Add 'static' modifier to all partial class declarations.", 
            messageFormat:      "Add 'static' modifier to all partial class declarations.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddStaticModifierToAllPartialClassDeclarations, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1110</summary>
        public static readonly DiagnosticDescriptor DeclareTypeInsideNamespace = Factory.Create(
            id:                 DiagnosticIdentifiers.DeclareTypeInsideNamespace, 
            title:              "Declare type inside namespace.", 
            messageFormat:      "Declare '{0}' inside namespace.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.DeclareTypeInsideNamespace, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1111</summary>
        public static readonly DiagnosticDescriptor AddBracesToSwitchSectionWithMultipleStatements = Factory.Create(
            id:                 DiagnosticIdentifiers.AddBracesToSwitchSectionWithMultipleStatements, 
            title:              "Add braces to switch section with multiple statements.", 
            messageFormat:      "Add braces to switch section with multiple statements.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddBracesToSwitchSectionWithMultipleStatements, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1112</summary>
        public static readonly DiagnosticDescriptor CombineEnumerableWhereMethodChain = Factory.Create(
            id:                 DiagnosticIdentifiers.CombineEnumerableWhereMethodChain, 
            title:              "Combine 'Enumerable.Where' method chain.", 
            messageFormat:      "Combine 'Enumerable.Where' method chain.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.CombineEnumerableWhereMethodChain, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor CombineEnumerableWhereMethodChainFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(CombineEnumerableWhereMethodChain);

        /// <summary>RCS1113</summary>
        public static readonly DiagnosticDescriptor UseStringIsNullOrEmptyMethod = Factory.Create(
            id:                 DiagnosticIdentifiers.UseStringIsNullOrEmptyMethod, 
            title:              "Use 'string.IsNullOrEmpty' method.", 
            messageFormat:      "Use 'string.IsNullOrEmpty' method.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseStringIsNullOrEmptyMethod, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1114</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantDelegateCreation = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantDelegateCreation, 
            title:              "Remove redundant delegate creation.", 
            messageFormat:      "Remove redundant delegate creation.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantDelegateCreation, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor RemoveRedundantDelegateCreationFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(RemoveRedundantDelegateCreation);

        /// <summary>RCS1118</summary>
        public static readonly DiagnosticDescriptor MarkLocalVariableAsConst = Factory.Create(
            id:                 DiagnosticIdentifiers.MarkLocalVariableAsConst, 
            title:              "Mark local variable as const.", 
            messageFormat:      "Mark local variable as const.", 
            category:           DiagnosticCategories.General, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MarkLocalVariableAsConst, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1123</summary>
        public static readonly DiagnosticDescriptor AddParenthesesAccordingToOperatorPrecedence = Factory.Create(
            id:                 DiagnosticIdentifiers.AddParenthesesAccordingToOperatorPrecedence, 
            title:              "Add parentheses according to operator precedence.", 
            messageFormat:      "Add parentheses according to operator precedence.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddParenthesesAccordingToOperatorPrecedence, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1124</summary>
        public static readonly DiagnosticDescriptor InlineLocalVariable = Factory.Create(
            id:                 DiagnosticIdentifiers.InlineLocalVariable, 
            title:              "Inline local variable.", 
            messageFormat:      "Inline local variable.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.InlineLocalVariable, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor InlineLocalVariableFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(InlineLocalVariable);

        /// <summary>RCS1126</summary>
        public static readonly DiagnosticDescriptor AddBracesToIfElse = Factory.Create(
            id:                 DiagnosticIdentifiers.AddBracesToIfElse, 
            title:              "Add braces to if-else.", 
            messageFormat:      "Add braces to {0}.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddBracesToIfElse, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1127</summary>
        public static readonly DiagnosticDescriptor MergeLocalDeclarationWithAssignment = Factory.Create(
            id:                 DiagnosticIdentifiers.MergeLocalDeclarationWithAssignment, 
            title:              "Merge local declaration with assignment.", 
            messageFormat:      "Merge local declaration with assignment.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MergeLocalDeclarationWithAssignment, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor MergeLocalDeclarationWithAssignmentFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(MergeLocalDeclarationWithAssignment);

        /// <summary>RCS1128</summary>
        public static readonly DiagnosticDescriptor UseCoalesceExpression = Factory.Create(
            id:                 DiagnosticIdentifiers.UseCoalesceExpression, 
            title:              "Use coalesce expression.", 
            messageFormat:      "Use coalesce expression.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseCoalesceExpression, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1129</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantFieldInitialization = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantFieldInitialization, 
            title:              "Remove redundant field initalization.", 
            messageFormat:      "Remove redundant field initialization.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantFieldInitialization, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1130</summary>
        public static readonly DiagnosticDescriptor BitwiseOperationOnEnumWithoutFlagsAttribute = Factory.Create(
            id:                 DiagnosticIdentifiers.BitwiseOperationOnEnumWithoutFlagsAttribute, 
            title:              "Bitwise operation on enum without Flags attribute.", 
            messageFormat:      "Bitwise operation on enum without Flags attribute.", 
            category:           DiagnosticCategories.General, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.BitwiseOperationOnEnumWithoutFlagsAttribute, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1132</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantOverridingMember = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantOverridingMember, 
            title:              "Remove redundant overriding member.", 
            messageFormat:      "Remove redundant overriding {0}.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantOverridingMember, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1133</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantDisposeOrCloseCall = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantDisposeOrCloseCall, 
            title:              "Remove redundant Dispose/Close call.", 
            messageFormat:      "Remove redundant '{0}' call.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantDisposeOrCloseCall, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1134</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantStatement, 
            title:              "Remove redundant statement.", 
            messageFormat:      "Remove redundant statement.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantStatement, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1135</summary>
        public static readonly DiagnosticDescriptor DeclareEnumMemberWithZeroValue = Factory.Create(
            id:                 DiagnosticIdentifiers.DeclareEnumMemberWithZeroValue, 
            title:              "Declare enum member with zero value (when enum has FlagsAttribute).", 
            messageFormat:      "Declare enum member with zero value (when enum has FlagsAttribute).", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.DeclareEnumMemberWithZeroValue, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1136</summary>
        public static readonly DiagnosticDescriptor MergeSwitchSectionsWithEquivalentContent = Factory.Create(
            id:                 DiagnosticIdentifiers.MergeSwitchSectionsWithEquivalentContent, 
            title:              "Merge switch sections with equivalent content.", 
            messageFormat:      "Merge switch sections with equivalent content.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MergeSwitchSectionsWithEquivalentContent, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1138</summary>
        public static readonly DiagnosticDescriptor AddSummaryToDocumentationComment = Factory.Create(
            id:                 DiagnosticIdentifiers.AddSummaryToDocumentationComment, 
            title:              "Add summary to documentation comment.", 
            messageFormat:      "Add summary to documentation comment.", 
            category:           DiagnosticCategories.Maintainability, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddSummaryToDocumentationComment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1139</summary>
        public static readonly DiagnosticDescriptor AddSummaryElementToDocumentationComment = Factory.Create(
            id:                 DiagnosticIdentifiers.AddSummaryElementToDocumentationComment, 
            title:              "Add summary element to documentation comment.", 
            messageFormat:      "Add summary element to documentation comment.", 
            category:           DiagnosticCategories.Maintainability, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddSummaryElementToDocumentationComment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1140</summary>
        public static readonly DiagnosticDescriptor AddExceptionToDocumentationComment = Factory.Create(
            id:                 DiagnosticIdentifiers.AddExceptionToDocumentationComment, 
            title:              "Add exception to documentation comment.", 
            messageFormat:      "Add exception to documentation comment.", 
            category:           DiagnosticCategories.Maintainability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddExceptionToDocumentationComment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1141</summary>
        public static readonly DiagnosticDescriptor AddParamElementToDocumentationComment = Factory.Create(
            id:                 DiagnosticIdentifiers.AddParamElementToDocumentationComment, 
            title:              "Add 'param' element to documentation comment.", 
            messageFormat:      "Add 'param' element to documentation comment.", 
            category:           DiagnosticCategories.Maintainability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddParamElementToDocumentationComment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1142</summary>
        public static readonly DiagnosticDescriptor AddTypeParamElementToDocumentationComment = Factory.Create(
            id:                 DiagnosticIdentifiers.AddTypeParamElementToDocumentationComment, 
            title:              "Add 'typeparam' element to documentation comment.", 
            messageFormat:      "Add 'typeparam' element to documentation comment.", 
            category:           DiagnosticCategories.Maintainability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddTypeParamElementToDocumentationComment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1143</summary>
        public static readonly DiagnosticDescriptor SimplifyCoalesceExpression = Factory.Create(
            id:                 DiagnosticIdentifiers.SimplifyCoalesceExpression, 
            title:              "Simplify coalesce expression.", 
            messageFormat:      "Simplify coalesce expression.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SimplifyCoalesceExpression, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1145</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantAsOperator = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantAsOperator, 
            title:              "Remove redundant 'as' operator.", 
            messageFormat:      "Remove redundant 'as' operator.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantAsOperator, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1146</summary>
        public static readonly DiagnosticDescriptor UseConditionalAccess = Factory.Create(
            id:                 DiagnosticIdentifiers.UseConditionalAccess, 
            title:              "Use conditional access.", 
            messageFormat:      "Use conditional access.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseConditionalAccess, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1151</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantCast = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantCast, 
            title:              "Remove redundant cast.", 
            messageFormat:      "Remove redundant cast.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantCast, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1153</summary>
        public static readonly DiagnosticDescriptor AddEmptyLineAfterClosingBrace = Factory.Create(
            id:                 DiagnosticIdentifiers.AddEmptyLineAfterClosingBrace, 
            title:              "Add empty line after closing brace.", 
            messageFormat:      "Add empty line after closing brace.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddEmptyLineAfterClosingBrace, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1154</summary>
        public static readonly DiagnosticDescriptor SortEnumMembers = Factory.Create(
            id:                 DiagnosticIdentifiers.SortEnumMembers, 
            title:              "Sort enum members.", 
            messageFormat:      "Sort '{0}' members.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SortEnumMembers, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1155</summary>
        public static readonly DiagnosticDescriptor UseStringComparison = Factory.Create(
            id:                 DiagnosticIdentifiers.UseStringComparison, 
            title:              "Use StringComparison when comparing strings.", 
            messageFormat:      "Use StringComparison when comparing strings.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseStringComparison, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1156</summary>
        public static readonly DiagnosticDescriptor UseStringLengthInsteadOfComparisonWithEmptyString = Factory.Create(
            id:                 DiagnosticIdentifiers.UseStringLengthInsteadOfComparisonWithEmptyString, 
            title:              "Use string.Length instead of comparison with empty string.", 
            messageFormat:      "Use string.Length instead of comparison with empty string.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseStringLengthInsteadOfComparisonWithEmptyString, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1157</summary>
        public static readonly DiagnosticDescriptor CompositeEnumValueContainsUndefinedFlag = Factory.Create(
            id:                 DiagnosticIdentifiers.CompositeEnumValueContainsUndefinedFlag, 
            title:              "Composite enum value contains undefined flag.", 
            messageFormat:      "Composite enum value contains undefined flag {0}.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.CompositeEnumValueContainsUndefinedFlag, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1158</summary>
        public static readonly DiagnosticDescriptor StaticMemberInGenericTypeShouldUseTypeParameter = Factory.Create(
            id:                 DiagnosticIdentifiers.StaticMemberInGenericTypeShouldUseTypeParameter, 
            title:              "Static member in generic type should use a type parameter.", 
            messageFormat:      "Static member in generic type should use a type parameter.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.StaticMemberInGenericTypeShouldUseTypeParameter, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1159</summary>
        public static readonly DiagnosticDescriptor UseGenericEventHandler = Factory.Create(
            id:                 DiagnosticIdentifiers.UseGenericEventHandler, 
            title:              "Use EventHandler<T>.", 
            messageFormat:      "Use EventHandler<T>.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseGenericEventHandler, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1160</summary>
        public static readonly DiagnosticDescriptor AbstractTypeShouldNotHavePublicConstructors = Factory.Create(
            id:                 DiagnosticIdentifiers.AbstractTypeShouldNotHavePublicConstructors, 
            title:              "Abstract type should not have public constructors.", 
            messageFormat:      "Abstract type should not have public constructors.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AbstractTypeShouldNotHavePublicConstructors, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1161</summary>
        public static readonly DiagnosticDescriptor EnumShouldDeclareExplicitValues = Factory.Create(
            id:                 DiagnosticIdentifiers.EnumShouldDeclareExplicitValues, 
            title:              "Enum should declare explicit values.", 
            messageFormat:      "Enum should declare explicit values.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.EnumShouldDeclareExplicitValues, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1162</summary>
        public static readonly DiagnosticDescriptor AvoidChainOfAssignments = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidChainOfAssignments, 
            title:              "Avoid chain of assignments.", 
            messageFormat:      "Avoid chain of assignments.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidChainOfAssignments, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1163</summary>
        public static readonly DiagnosticDescriptor UnusedParameter = Factory.Create(
            id:                 DiagnosticIdentifiers.UnusedParameter, 
            title:              "Unused parameter.", 
            messageFormat:      "Unused parameter '{0}'.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UnusedParameter, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1164</summary>
        public static readonly DiagnosticDescriptor UnusedTypeParameter = Factory.Create(
            id:                 DiagnosticIdentifiers.UnusedTypeParameter, 
            title:              "Unused type parameter.", 
            messageFormat:      "Unused type parameter '{0}'.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UnusedTypeParameter, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1165</summary>
        public static readonly DiagnosticDescriptor UnconstrainedTypeParameterCheckedForNull = Factory.Create(
            id:                 DiagnosticIdentifiers.UnconstrainedTypeParameterCheckedForNull, 
            title:              "Unconstrained type parameter checked for null.", 
            messageFormat:      "Unconstrained type parameter checked for null.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UnconstrainedTypeParameterCheckedForNull, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1166</summary>
        public static readonly DiagnosticDescriptor ValueTypeObjectIsNeverEqualToNull = Factory.Create(
            id:                 DiagnosticIdentifiers.ValueTypeObjectIsNeverEqualToNull, 
            title:              "Value type object is never equal to null.", 
            messageFormat:      "Value type object is never equal to null.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ValueTypeObjectIsNeverEqualToNull, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1168</summary>
        public static readonly DiagnosticDescriptor ParameterNameDiffersFromBase = Factory.Create(
            id:                 DiagnosticIdentifiers.ParameterNameDiffersFromBase, 
            title:              "Parameter name differs from base name.", 
            messageFormat:      "Parameter name '{0}' differs from base name '{1}'.", 
            category:           DiagnosticCategories.Maintainability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ParameterNameDiffersFromBase, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1169</summary>
        public static readonly DiagnosticDescriptor MakeFieldReadOnly = Factory.Create(
            id:                 DiagnosticIdentifiers.MakeFieldReadOnly, 
            title:              "Make field read-only.", 
            messageFormat:      "Make field read-only.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MakeFieldReadOnly, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1170</summary>
        public static readonly DiagnosticDescriptor UseReadOnlyAutoProperty = Factory.Create(
            id:                 DiagnosticIdentifiers.UseReadOnlyAutoProperty, 
            title:              "Use read-only auto-implemented property.", 
            messageFormat:      "Use read-only auto-implemented property.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseReadOnlyAutoProperty, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1171</summary>
        public static readonly DiagnosticDescriptor SimplifyLazyInitialization = Factory.Create(
            id:                 DiagnosticIdentifiers.SimplifyLazyInitialization, 
            title:              "Simplify lazy initialization.", 
            messageFormat:      "Simplify lazy initialization.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SimplifyLazyInitialization, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1172</summary>
        public static readonly DiagnosticDescriptor UseIsOperatorInsteadOfAsOperator = Factory.Create(
            id:                 DiagnosticIdentifiers.UseIsOperatorInsteadOfAsOperator, 
            title:              "Use 'is' operator instead of 'as' operator.", 
            messageFormat:      "Use 'is' operator instead of 'as' operator.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseIsOperatorInsteadOfAsOperator, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1173</summary>
        public static readonly DiagnosticDescriptor UseCoalesceExpressionInsteadOfIf = Factory.Create(
            id:                 DiagnosticIdentifiers.UseCoalesceExpressionInsteadOfIf, 
            title:              "Use coalesce expression instead of if.", 
            messageFormat:      "Use coalesce expression instead of if.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseCoalesceExpressionInsteadOfIf, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1174</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantAsyncAwait = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantAsyncAwait, 
            title:              "Remove redundant async/await.", 
            messageFormat:      "Remove redundant async/await.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantAsyncAwait, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor RemoveRedundantAsyncAwaitFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(RemoveRedundantAsyncAwait);

        /// <summary>RCS1175</summary>
        public static readonly DiagnosticDescriptor UnusedThisParameter = Factory.Create(
            id:                 DiagnosticIdentifiers.UnusedThisParameter, 
            title:              "Unused this parameter.", 
            messageFormat:      "Unused this parameter '{0}'.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UnusedThisParameter, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1176</summary>
        public static readonly DiagnosticDescriptor UseVarInsteadOfExplicitTypeWhenTypeIsNotObvious = Factory.Create(
            id:                 DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeWhenTypeIsNotObvious, 
            title:              "Use 'var' instead of explicit type (when the type is not obvious).", 
            messageFormat:      "Use 'var' instead of explicit type.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeWhenTypeIsNotObvious, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1177</summary>
        public static readonly DiagnosticDescriptor UseVarInsteadOfExplicitTypeInForEach = Factory.Create(
            id:                 DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeInForEach, 
            title:              "Use 'var' instead of explicit type (in foreach).", 
            messageFormat:      "Use 'var' instead of explicit type.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseVarInsteadOfExplicitTypeInForEach, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1179</summary>
        public static readonly DiagnosticDescriptor UseReturnInsteadOfAssignment = Factory.Create(
            id:                 DiagnosticIdentifiers.UseReturnInsteadOfAssignment, 
            title:              "Use return instead of assignment.", 
            messageFormat:      "Use return instead of assignment.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseReturnInsteadOfAssignment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1180</summary>
        public static readonly DiagnosticDescriptor InlineLazyInitialization = Factory.Create(
            id:                 DiagnosticIdentifiers.InlineLazyInitialization, 
            title:              "Inline lazy initialization.", 
            messageFormat:      "Inline lazy initialization.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.InlineLazyInitialization, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1181</summary>
        public static readonly DiagnosticDescriptor ConvertCommentToDocumentationComment = Factory.Create(
            id:                 DiagnosticIdentifiers.ConvertCommentToDocumentationComment, 
            title:              "Convert comment to documentation comment.", 
            messageFormat:      "Convert comment to documentation comment.", 
            category:           DiagnosticCategories.General, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ConvertCommentToDocumentationComment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1182</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantBaseInterface = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantBaseInterface, 
            title:              "Remove redundant base interface.", 
            messageFormat:      "Interface '{0}' is already implemented by '{1}'.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantBaseInterface, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1183</summary>
        public static readonly DiagnosticDescriptor FormatInitializerWithSingleExpressionOnSingleLine = Factory.Create(
            id:                 DiagnosticIdentifiers.FormatInitializerWithSingleExpressionOnSingleLine, 
            title:              "Format initializer with single expression on single line.", 
            messageFormat:      "Format initializer with single expression on single line.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FormatInitializerWithSingleExpressionOnSingleLine, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1184</summary>
        public static readonly DiagnosticDescriptor FormatConditionalExpression = Factory.Create(
            id:                 DiagnosticIdentifiers.FormatConditionalExpression, 
            title:              "Format conditional expression (format ? and : on next line).", 
            messageFormat:      "Format conditional expression.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FormatConditionalExpression, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1185</summary>
        public static readonly DiagnosticDescriptor FormatSingleLineBlock = Factory.Create(
            id:                 DiagnosticIdentifiers.FormatSingleLineBlock, 
            title:              "Format single-line block.", 
            messageFormat:      "Format single-line block.", 
            category:           DiagnosticCategories.Formatting, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.FormatSingleLineBlock, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1186</summary>
        public static readonly DiagnosticDescriptor UseRegexInstanceInsteadOfStaticMethod = Factory.Create(
            id:                 DiagnosticIdentifiers.UseRegexInstanceInsteadOfStaticMethod, 
            title:              "Use Regex instance instead of static method.", 
            messageFormat:      "Use Regex instance instead of static method.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseRegexInstanceInsteadOfStaticMethod, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1187</summary>
        public static readonly DiagnosticDescriptor UseConstantInsteadOfField = Factory.Create(
            id:                 DiagnosticIdentifiers.UseConstantInsteadOfField, 
            title:              "Use constant instead of field.", 
            messageFormat:      "Use constant instead of field.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseConstantInsteadOfField, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1188</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantAutoPropertyInitialization = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantAutoPropertyInitialization, 
            title:              "Remove redundant auto-property initialization.", 
            messageFormat:      "Remove redundant auto-property initialization.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantAutoPropertyInitialization, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1189</summary>
        public static readonly DiagnosticDescriptor AddOrRemoveRegionName = Factory.Create(
            id:                 DiagnosticIdentifiers.AddOrRemoveRegionName, 
            title:              "Add or remove region name.", 
            messageFormat:      "{0} region name {1} #endregion.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddOrRemoveRegionName, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1190</summary>
        public static readonly DiagnosticDescriptor JoinStringExpressions = Factory.Create(
            id:                 DiagnosticIdentifiers.JoinStringExpressions, 
            title:              "Join string expressions.", 
            messageFormat:      "Join string expressions.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.JoinStringExpressions, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1191</summary>
        public static readonly DiagnosticDescriptor DeclareEnumValueAsCombinationOfNames = Factory.Create(
            id:                 DiagnosticIdentifiers.DeclareEnumValueAsCombinationOfNames, 
            title:              "Declare enum value as combination of names.", 
            messageFormat:      "Declare enum value as combination of names.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.DeclareEnumValueAsCombinationOfNames, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1192</summary>
        public static readonly DiagnosticDescriptor UseRegularStringLiteralInsteadOfVerbatimStringLiteral = Factory.Create(
            id:                 DiagnosticIdentifiers.UseRegularStringLiteralInsteadOfVerbatimStringLiteral, 
            title:              "Use regular string literal instead of verbatim string literal.", 
            messageFormat:      "Use regular string literal instead of verbatim string literal.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseRegularStringLiteralInsteadOfVerbatimStringLiteral, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1193</summary>
        public static readonly DiagnosticDescriptor OverridingMemberCannotChangeParamsModifier = Factory.Create(
            id:                 DiagnosticIdentifiers.OverridingMemberCannotChangeParamsModifier, 
            title:              "Overriding member cannot change 'params' modifier.", 
            messageFormat:      "Overriding member cannot change 'params' modifier.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.OverridingMemberCannotChangeParamsModifier, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1194</summary>
        public static readonly DiagnosticDescriptor ImplementExceptionConstructors = Factory.Create(
            id:                 DiagnosticIdentifiers.ImplementExceptionConstructors, 
            title:              "Implement exception constructors.", 
            messageFormat:      "Implement exception constructors.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ImplementExceptionConstructors, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1195</summary>
        public static readonly DiagnosticDescriptor UseExclusiveOrOperator = Factory.Create(
            id:                 DiagnosticIdentifiers.UseExclusiveOrOperator, 
            title:              "Use ^ operator.", 
            messageFormat:      "Use ^ operator.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseExclusiveOrOperator, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1196</summary>
        public static readonly DiagnosticDescriptor CallExtensionMethodAsInstanceMethod = Factory.Create(
            id:                 DiagnosticIdentifiers.CallExtensionMethodAsInstanceMethod, 
            title:              "Call extension method as instance method.", 
            messageFormat:      "Call extension method as instance method.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.CallExtensionMethodAsInstanceMethod, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1197</summary>
        public static readonly DiagnosticDescriptor OptimizeStringBuilderAppendCall = Factory.Create(
            id:                 DiagnosticIdentifiers.OptimizeStringBuilderAppendCall, 
            title:              "Optimize StringBuilder.Append/AppendLine call.", 
            messageFormat:      "Optimize StringBuilder.{0} call.", 
            category:           DiagnosticCategories.Performance, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.OptimizeStringBuilderAppendCall, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1198</summary>
        public static readonly DiagnosticDescriptor AvoidBoxingOfValueType = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidBoxingOfValueType, 
            title:              "Avoid unnecessary boxing of value type.", 
            messageFormat:      "Avoid unnecessary boxing of value type.", 
            category:           DiagnosticCategories.Performance, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidBoxingOfValueType, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1199</summary>
        public static readonly DiagnosticDescriptor SimplifyBooleanExpression = Factory.Create(
            id:                 DiagnosticIdentifiers.SimplifyBooleanExpression, 
            title:              "Simplify boolean expression.", 
            messageFormat:      "Simplify boolean expression.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SimplifyBooleanExpression, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1200</summary>
        public static readonly DiagnosticDescriptor CallThenByInsteadOfOrderBy = Factory.Create(
            id:                 DiagnosticIdentifiers.CallThenByInsteadOfOrderBy, 
            title:              "Call 'Enumerable.ThenBy' instead of 'Enumerable.OrderBy'.", 
            messageFormat:      "Call 'Enumerable.ThenBy{0}' instead of 'Enumerable.OrderBy{0}'.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.CallThenByInsteadOfOrderBy, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1201</summary>
        public static readonly DiagnosticDescriptor UseMethodChaining = Factory.Create(
            id:                 DiagnosticIdentifiers.UseMethodChaining, 
            title:              "Use method chaining.", 
            messageFormat:      "Use method chaining.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseMethodChaining, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1202</summary>
        public static readonly DiagnosticDescriptor AvoidNullReferenceException = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidNullReferenceException, 
            title:              "Avoid NullReferenceException.", 
            messageFormat:      "Avoid NullReferenceException.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidNullReferenceException, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1203</summary>
        public static readonly DiagnosticDescriptor UseAttributeUsageAttribute = Factory.Create(
            id:                 DiagnosticIdentifiers.UseAttributeUsageAttribute, 
            title:              "Use AttributeUsageAttribute.", 
            messageFormat:      "Use AttributeUsageAttribute.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseAttributeUsageAttribute, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1204</summary>
        public static readonly DiagnosticDescriptor UseEventArgsEmpty = Factory.Create(
            id:                 DiagnosticIdentifiers.UseEventArgsEmpty, 
            title:              "Use EventArgs.Empty.", 
            messageFormat:      "Use EventArgs.Empty.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseEventArgsEmpty, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1205</summary>
        public static readonly DiagnosticDescriptor OrderNamedArguments = Factory.Create(
            id:                 DiagnosticIdentifiers.OrderNamedArguments, 
            title:              "Order named arguments according to the order of parameters.", 
            messageFormat:      "Order named arguments according to the order of parameters.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.OrderNamedArguments, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1206</summary>
        public static readonly DiagnosticDescriptor UseConditionalAccessInsteadOfConditionalExpression = Factory.Create(
            id:                 DiagnosticIdentifiers.UseConditionalAccessInsteadOfConditionalExpression, 
            title:              "Use conditional access instead of conditional expression.", 
            messageFormat:      "Use conditional access instead of conditional expression.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseConditionalAccessInsteadOfConditionalExpression, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1207</summary>
        public static readonly DiagnosticDescriptor UseMethodGroupInsteadOfAnonymousFunction = Factory.Create(
            id:                 DiagnosticIdentifiers.UseMethodGroupInsteadOfAnonymousFunction, 
            title:              "Use method group instead of anonymous function.", 
            messageFormat:      "Use method group instead of anonymous function.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseMethodGroupInsteadOfAnonymousFunction, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor UseMethodGroupInsteadOfAnonymousFunctionFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(UseMethodGroupInsteadOfAnonymousFunction);

        /// <summary>RCS1208</summary>
        public static readonly DiagnosticDescriptor ReduceIfNesting = Factory.Create(
            id:                 DiagnosticIdentifiers.ReduceIfNesting, 
            title:              "Reduce if nesting.", 
            messageFormat:      "Reduce if nesting.", 
            category:           DiagnosticCategories.Style, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ReduceIfNesting, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1209</summary>
        public static readonly DiagnosticDescriptor OrderTypeParameterConstraints = Factory.Create(
            id:                 DiagnosticIdentifiers.OrderTypeParameterConstraints, 
            title:              "Order type parameter constraints.", 
            messageFormat:      "Order type parameter constraints.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.OrderTypeParameterConstraints, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1210</summary>
        public static readonly DiagnosticDescriptor ReturnTaskInsteadOfNull = Factory.Create(
            id:                 DiagnosticIdentifiers.ReturnTaskInsteadOfNull, 
            title:              "Return Task.FromResult instead of returning null.", 
            messageFormat:      "Return Task.FromResult instead of returning null.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ReturnTaskInsteadOfNull, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1211</summary>
        public static readonly DiagnosticDescriptor RemoveUnnecessaryElseClause = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveUnnecessaryElseClause, 
            title:              "Remove unnecessary else clause.", 
            messageFormat:      "Remove unnecessary else clause.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveUnnecessaryElseClause, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1212</summary>
        public static readonly DiagnosticDescriptor RemoveRedundantAssignment = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveRedundantAssignment, 
            title:              "Remove redundant assignment.", 
            messageFormat:      "Remove redundant assignment.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveRedundantAssignment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1213</summary>
        public static readonly DiagnosticDescriptor RemoveUnusedMemberDeclaration = Factory.Create(
            id:                 DiagnosticIdentifiers.RemoveUnusedMemberDeclaration, 
            title:              "Remove unused member declaration.", 
            messageFormat:      "Remove unused {0} declaration.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.RemoveUnusedMemberDeclaration, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1214</summary>
        public static readonly DiagnosticDescriptor UnnecessaryInterpolatedString = Factory.Create(
            id:                 DiagnosticIdentifiers.UnnecessaryInterpolatedString, 
            title:              "Unnecessary interpolated string.", 
            messageFormat:      "Unnecessary interpolated string.", 
            category:           DiagnosticCategories.Simplification, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UnnecessaryInterpolatedString, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor UnnecessaryInterpolatedStringFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(UnnecessaryInterpolatedString);

        /// <summary>RCS1215</summary>
        public static readonly DiagnosticDescriptor ExpressionIsAlwaysEqualToTrueOrFalse = Factory.Create(
            id:                 DiagnosticIdentifiers.ExpressionIsAlwaysEqualToTrueOrFalse, 
            title:              "Expression is always equal to true/false.", 
            messageFormat:      "Expression is always equal to '{0}'.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Warning, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ExpressionIsAlwaysEqualToTrueOrFalse, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1216</summary>
        public static readonly DiagnosticDescriptor UnnecessaryUnsafeContext = Factory.Create(
            id:                 DiagnosticIdentifiers.UnnecessaryUnsafeContext, 
            title:              "Unnecessary unsafe context.", 
            messageFormat:      "Unnecessary unsafe context.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UnnecessaryUnsafeContext, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        /// <summary>RCS1217</summary>
        public static readonly DiagnosticDescriptor ConvertInterpolatedStringToConcatenation = Factory.Create(
            id:                 DiagnosticIdentifiers.ConvertInterpolatedStringToConcatenation, 
            title:              "Convert interpolated string to concatenation.", 
            messageFormat:      "Convert interpolated string to concatenation.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ConvertInterpolatedStringToConcatenation, 
            customTags:         Array.Empty<string>());

        public static readonly DiagnosticDescriptor ConvertInterpolatedStringToConcatenationFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(ConvertInterpolatedStringToConcatenation);

        /// <summary>RCS1218</summary>
        public static readonly DiagnosticDescriptor SimplifyCodeBranching = Factory.Create(
            id:                 DiagnosticIdentifiers.SimplifyCodeBranching, 
            title:              "Simplify code branching.", 
            messageFormat:      "Simplify code branching.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.SimplifyCodeBranching, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1219</summary>
        public static readonly DiagnosticDescriptor CallSkipAndAnyInsteadOfCount = Factory.Create(
            id:                 DiagnosticIdentifiers.CallSkipAndAnyInsteadOfCount, 
            title:              "Call 'Enumerable.Skip' and 'Enumerable.Any' instead of 'Enumerable.Count'.", 
            messageFormat:      "Call 'Enumerable.Skip' and 'Enumerable.Any' instead of 'Enumerable.Count'.", 
            category:           DiagnosticCategories.Performance, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.CallSkipAndAnyInsteadOfCount, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1220</summary>
        public static readonly DiagnosticDescriptor UsePatternMatchingInsteadOfIsAndCast = Factory.Create(
            id:                 DiagnosticIdentifiers.UsePatternMatchingInsteadOfIsAndCast, 
            title:              "Use pattern matching instead of combination of 'is' operator and cast operator.", 
            messageFormat:      "Use pattern matching instead of combination of 'is' operator and cast operator.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UsePatternMatchingInsteadOfIsAndCast, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1221</summary>
        public static readonly DiagnosticDescriptor UsePatternMatchingInsteadOfAsAndNullCheck = Factory.Create(
            id:                 DiagnosticIdentifiers.UsePatternMatchingInsteadOfAsAndNullCheck, 
            title:              "Use pattern matching instead of combination of 'as' operator and null check.", 
            messageFormat:      "Use pattern matching instead of combination of 'as' operator and null check.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UsePatternMatchingInsteadOfAsAndNullCheck, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1222</summary>
        public static readonly DiagnosticDescriptor MergePreprocessorDirectives = Factory.Create(
            id:                 DiagnosticIdentifiers.MergePreprocessorDirectives, 
            title:              "Merge preprocessor directives.", 
            messageFormat:      "Merge preprocessor directives.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MergePreprocessorDirectives, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1223</summary>
        public static readonly DiagnosticDescriptor MarkTypeWithDebuggerDisplayAttribute = Factory.Create(
            id:                 DiagnosticIdentifiers.MarkTypeWithDebuggerDisplayAttribute, 
            title:              "Mark publicly visible type with DebuggerDisplay attribute.", 
            messageFormat:      "Mark '{0}' with DebuggerDisplay attribute.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MarkTypeWithDebuggerDisplayAttribute, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1224</summary>
        public static readonly DiagnosticDescriptor MakeMethodExtensionMethod = Factory.Create(
            id:                 DiagnosticIdentifiers.MakeMethodExtensionMethod, 
            title:              "Make method an extension method.", 
            messageFormat:      "Make method an extension method.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MakeMethodExtensionMethod, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1225</summary>
        public static readonly DiagnosticDescriptor MakeClassSealed = Factory.Create(
            id:                 DiagnosticIdentifiers.MakeClassSealed, 
            title:              "Make class sealed.", 
            messageFormat:      "Make class sealed.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MakeClassSealed, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1226</summary>
        public static readonly DiagnosticDescriptor AddParagraphToDocumentationComment = Factory.Create(
            id:                 DiagnosticIdentifiers.AddParagraphToDocumentationComment, 
            title:              "Add paragraph to documentation comment.", 
            messageFormat:      "Add paragraph to documentation comment.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AddParagraphToDocumentationComment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1227</summary>
        public static readonly DiagnosticDescriptor ValidateArgumentsCorrectly = Factory.Create(
            id:                 DiagnosticIdentifiers.ValidateArgumentsCorrectly, 
            title:              "Validate arguments correctly.", 
            messageFormat:      "Validate arguments correctly.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ValidateArgumentsCorrectly, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1228</summary>
        public static readonly DiagnosticDescriptor UnusedElementInDocumentationComment = Factory.Create(
            id:                 DiagnosticIdentifiers.UnusedElementInDocumentationComment, 
            title:              "Unused element in documentation comment.", 
            messageFormat:      "Unused element in documentation comment.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UnusedElementInDocumentationComment, 
            customTags:         WellKnownDiagnosticTags.Unnecessary);

        public static readonly DiagnosticDescriptor UnusedElementInDocumentationCommentFadeOut = DiagnosticDescriptorFactory.CreateFadeOut(UnusedElementInDocumentationComment);

        /// <summary>RCS1229</summary>
        public static readonly DiagnosticDescriptor UseAsyncAwait = Factory.Create(
            id:                 DiagnosticIdentifiers.UseAsyncAwait, 
            title:              "Use async/await when necessary.", 
            messageFormat:      "Use async/await when necessary.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseAsyncAwait, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1230</summary>
        public static readonly DiagnosticDescriptor UnnecessaryUsageOfEnumerator = Factory.Create(
            id:                 DiagnosticIdentifiers.UnnecessaryUsageOfEnumerator, 
            title:              "Unnecessary usage of enumerator.", 
            messageFormat:      "Unnecessary usage of enumerator.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UnnecessaryUsageOfEnumerator, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1231</summary>
        public static readonly DiagnosticDescriptor MakeParameterRefReadOnly = Factory.Create(
            id:                 DiagnosticIdentifiers.MakeParameterRefReadOnly, 
            title:              "Make parameter ref read-only.", 
            messageFormat:      "Make parameter ref read-only.", 
            category:           DiagnosticCategories.Performance, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: false, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.MakeParameterRefReadOnly, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1232</summary>
        public static readonly DiagnosticDescriptor OrderElementsInDocumentationComment = Factory.Create(
            id:                 DiagnosticIdentifiers.OrderElementsInDocumentationComment, 
            title:              "Order elements in documentation comment.", 
            messageFormat:      "Order elements in documentation comment.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.OrderElementsInDocumentationComment, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1233</summary>
        public static readonly DiagnosticDescriptor UseShortCircuitingOperator = Factory.Create(
            id:                 DiagnosticIdentifiers.UseShortCircuitingOperator, 
            title:              "Use short-circuiting operator.", 
            messageFormat:      "Use short-circuiting operator.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseShortCircuitingOperator, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1234</summary>
        public static readonly DiagnosticDescriptor DuplicateEnumValue = Factory.Create(
            id:                 DiagnosticIdentifiers.DuplicateEnumValue, 
            title:              "Duplicate enum value.", 
            messageFormat:      "Duplicate enum value.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.DuplicateEnumValue, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1235</summary>
        public static readonly DiagnosticDescriptor OptimizeMethodCall = Factory.Create(
            id:                 DiagnosticIdentifiers.OptimizeMethodCall, 
            title:              "Optimize method call.", 
            messageFormat:      "Optimize '{0}' call.", 
            category:           DiagnosticCategories.Performance, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.OptimizeMethodCall, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1236</summary>
        public static readonly DiagnosticDescriptor UseExceptionFilter = Factory.Create(
            id:                 DiagnosticIdentifiers.UseExceptionFilter, 
            title:              "Use exception filter.", 
            messageFormat:      "Use exception filter.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseExceptionFilter, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1237</summary>
        public static readonly DiagnosticDescriptor UseBitShiftOperator = Factory.Create(
            id:                 DiagnosticIdentifiers.UseBitShiftOperator, 
            title:              "Use bit shift operator.", 
            messageFormat:      "Use bit shift operator.", 
            category:           DiagnosticCategories.Usage, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseBitShiftOperator, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1238</summary>
        public static readonly DiagnosticDescriptor AvoidNestedConditionalOperators = Factory.Create(
            id:                 DiagnosticIdentifiers.AvoidNestedConditionalOperators, 
            title:              "Avoid nested ?: operators.", 
            messageFormat:      "Avoid nested ?: operators.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.AvoidNestedConditionalOperators, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1239</summary>
        public static readonly DiagnosticDescriptor UseForStatementInsteadOfWhileStatement = Factory.Create(
            id:                 DiagnosticIdentifiers.UseForStatementInsteadOfWhileStatement, 
            title:              "Use 'for' statement instead of 'while' statement.", 
            messageFormat:      "Use 'for' statement instead of 'while' statement.", 
            category:           DiagnosticCategories.Readability, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UseForStatementInsteadOfWhileStatement, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1240</summary>
        public static readonly DiagnosticDescriptor UnnecessaryOperator = Factory.Create(
            id:                 DiagnosticIdentifiers.UnnecessaryOperator, 
            title:              "Operator is unnecessary.", 
            messageFormat:      "The '{0}' operator is unnecessary.", 
            category:           DiagnosticCategories.Redundancy, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.UnnecessaryOperator, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1241</summary>
        public static readonly DiagnosticDescriptor ImplementNonGenericCounterpart = Factory.Create(
            id:                 DiagnosticIdentifiers.ImplementNonGenericCounterpart, 
            title:              "Implement non-generic counterpart.", 
            messageFormat:      "Implement {0} when implementing {0}<T>.", 
            category:           DiagnosticCategories.Design, 
            defaultSeverity:    DiagnosticSeverity.Hidden, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.ImplementNonGenericCounterpart, 
            customTags:         Array.Empty<string>());

        /// <summary>RCS1243</summary>
        public static readonly DiagnosticDescriptor DuplicateWordInComment = Factory.Create(
            id:                 DiagnosticIdentifiers.DuplicateWordInComment, 
            title:              "Duplicate word in comment.", 
            messageFormat:      "Duplicate word in comment.", 
            category:           DiagnosticCategories.General, 
            defaultSeverity:    DiagnosticSeverity.Info, 
            isEnabledByDefault: true, 
            description:        null, 
            helpLinkUri:        DiagnosticIdentifiers.DuplicateWordInComment, 
            customTags:         Array.Empty<string>());

    }
}